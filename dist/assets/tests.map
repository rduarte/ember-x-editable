{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/ember-x-editable-test.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/start-app.js","dummy/tests/integration/components/ember-x-editable-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/components/x-editable-text-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/ember-x-editable-test', ['jquery', 'qunit', 'dummy/tests/helpers/module-for-acceptance'], function (_jquery, _qunit, _moduleForAcceptance) {\n  'use strict';\n\n  (0, _moduleForAcceptance.default)('Acceptance | ember-x-editable');\n\n  (0, _qunit.test)('text is initially TestString', function (assert) {\n    assert.expect(2);\n    visit('/');\n    andThen(function () {\n      assert.equal(find('.ember-x-editable-text', 'html').hasClass('is-not-editing'), true, 'is-not-editing class initially');\n      assert.equal(find('.ember-x-editable-text', 'html').val(), 'TestString', 'text is initially TestString');\n    });\n  });\n\n  (0, _qunit.test)('is-editing class applied', function (assert) {\n    assert.expect(1);\n    visit('/');\n    click('.ember-x-editable-text');\n    andThen(function () {\n      assert.equal(find('.ember-x-editable-text', 'html').hasClass('is-editing'), true, 'is-editing class after clicking');\n    });\n  });\n\n  (0, _qunit.test)('text is saved', function (assert) {\n    assert.expect(1);\n    visit('/');\n    andThen(function () {\n      click('.ember-x-editable-text');\n      andThen(function () {\n        fillIn('.ember-x-editable-text', 'New test string');\n      });\n      andThen(function () {\n        (0, _jquery.default)('.editable-buttons .editable-submit').click();\n      });\n      andThen(function () {\n        assert.equal(find('.ember-x-editable-text', 'html').val(), 'New test string', 'text is saved');\n      });\n    });\n  });\n\n  (0, _qunit.test)('text is cancelled, cancel button', function (assert) {\n    assert.expect(1);\n    visit('/');\n    andThen(function () {\n      click('.ember-x-editable-text');\n      andThen(function () {\n        fillIn('.ember-x-editable-text', 'Cancelled text');\n      });\n      andThen(function () {\n        (0, _jquery.default)('.editable-buttons .editable-cancel').click();\n      });\n      andThen(function () {\n        assert.equal(find('.ember-x-editable-text', 'html').val(), 'TestString', 'text cancelled');\n      });\n    });\n  });\n\n  (0, _qunit.test)('text is cancelled, focusOut', function (assert) {\n    assert.expect(1);\n    visit('/');\n    andThen(function () {\n      click('.ember-x-editable-text');\n      andThen(function () {\n        fillIn('.ember-x-editable-text', 'Cancelled text');\n      });\n      andThen(function () {\n        (0, _jquery.default)('.ember-x-editable-text').focusout();\n      });\n      andThen(function () {\n        assert.equal(find('.ember-x-editable-text', 'html').val(), 'TestString', 'text cancelled');\n      });\n    });\n  });\n\n  (0, _qunit.test)('x-select save change', function (assert) {\n    assert.expect(1);\n    visit('/');\n    andThen(function () {\n      click('.ember-x-editable-select');\n      andThen(function () {\n        (0, _jquery.default)('.ember-x-editable-select option:nth-child(3)').prop('selected', true).trigger('change');\n      });\n      andThen(function () {\n        (0, _jquery.default)('.editable-buttons .editable-save').click();\n      });\n      andThen(function () {\n        assert.equal(find('.ember-x-editable-select option:selected', 'html').text(), 'ReallyReallyLongTestString', 'selection saved');\n      });\n    });\n  });\n\n  (0, _qunit.test)('x-select cancel change', function (assert) {\n    assert.expect(1);\n    visit('/');\n    andThen(function () {\n      click('.ember-x-editable-select');\n      andThen(function () {\n        (0, _jquery.default)('.ember-x-editable-select option:nth-child(1)').prop('selected', true).trigger('change');\n      });\n      andThen(function () {\n        (0, _jquery.default)('.editable-buttons .editable-cancel').click();\n      });\n      andThen(function () {\n        assert.equal(find('.ember-x-editable-select option:selected', 'html').text(), 'LongerTestString', 'selection cancelled');\n      });\n    });\n  });\n});","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/validators.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/validators.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = _ember.default.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = _ember.default.RSVP.resolve;\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = _ember.default.merge,\n      run = _ember.default.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('dummy/tests/integration/components/ember-x-editable-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('ember-x-editable', 'Integration | Component | ember x editable', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('mouseEnter/mouseLeave', function (assert) {\n    this.set('mouseInsideComponent', false);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"PLgrr0No\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"x-editable-text\\\"],null,[[\\\"mouseInsideComponent\\\",\\\"validator\\\",\\\"value\\\"],[[28,[\\\"mouseInsideComponent\\\"]],[28,[\\\"validator\\\"]],[28,[\\\"value\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('div').first().mouseenter();\n    assert.equal(this.get('mouseInsideComponent'), true);\n    this.$('div').first().mouseleave();\n    assert.equal(this.get('mouseInsideComponent'), false);\n  });\n\n  (0, _emberQunit.test)('Empty value', function (assert) {\n    this.set('value', 'Empty');\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"wBji0fSM\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"x-editable-text\\\"],null,[[\\\"validator\\\",\\\"value\\\"],[[28,[\\\"validator\\\"]],[28,[\\\"value\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.$('div').first().focusin();\n    assert.equal(this.get('value'), '');\n  });\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/ember-x-editable-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/ember-x-editable-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/ember-x-editable-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/ember-x-editable-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/components/x-editable-text-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/components/x-editable-text-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/components/x-editable-text-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('component:x-editable-text', 'Unit | x editable text', {\n    unit: true\n  });\n\n  (0, _emberQunit.test)('should set isValid based on errorMessage', function (assert) {\n    assert.expect(2);\n    var xText = this.subject();\n    xText.set('errorMessage', 'Error!!');\n    assert.equal(xText.get('isValid'), false);\n    xText.set('errorMessage', null);\n    assert.equal(xText.get('isValid'), true);\n  });\n\n  (0, _emberQunit.test)('isEmpty: not empty', function (assert) {\n    assert.expect(1);\n    var xText = this.subject();\n    xText.set('value', 'Hello world');\n    assert.equal(xText.get('isEmpty'), false);\n  });\n\n  (0, _emberQunit.test)('isEmpty: \\'\\'', function (assert) {\n    assert.expect(1);\n    var xText = this.subject();\n    xText.set('value', '');\n    assert.equal(xText.get('isEmpty'), true);\n  });\n\n  (0, _emberQunit.test)('isEmpty: Empty', function (assert) {\n    assert.expect(1);\n    var xText = this.subject();\n    xText.set('value', 'Empty');\n    assert.equal(xText.get('isEmpty'), true);\n  });\n\n  (0, _emberQunit.test)('isEmpty: null', function (assert) {\n    assert.expect(1);\n    var xText = this.subject();\n    xText.set('value', null);\n    assert.equal(xText.get('isEmpty'), true);\n  });\n\n  (0, _emberQunit.test)('handleEmptyValue: null', function (assert) {\n    assert.expect(1);\n    var xText = this.subject();\n    xText.set('value', null);\n    xText.handleEmptyValue();\n    assert.equal(xText.get('value'), 'Empty');\n  });\n\n  (0, _emberQunit.test)('handleEmptyValue: \\'\\'', function (assert) {\n    assert.expect(1);\n    var xText = this.subject();\n    xText.set('value', '');\n    xText.handleEmptyValue();\n    assert.equal(xText.get('value'), 'Empty');\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1DA;AACA;","file":"tests.js"}